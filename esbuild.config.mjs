import esbuild from "esbuild";
import process from "process";
import os from "os";
import fs from "fs/promises";
import builtins from "builtin-modules";
import copy from 'esbuild-plugin-copy';

// Banner message for the generated/bundled files
const banner = `
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// Determine the platform and architecture
const platform = process.platform; // 'darwin', 'win32', 'linux', etc.
const arch = os.arch(); // 'arm64', 'x64', etc.

// Generate a directory name based on platform and architecture
const getOutDir = () => {
	switch (platform) {
		case 'darwin':
			return arch === 'arm64' ? 'dist/apple-silicon' : 'dist/apple-intel';
		case 'win32':
			return 'dist/windows';
		case 'linux':
			return 'dist/linux';
		default:
			return 'dist/unknown';
	}
};

// Ensure the output directory exists
const ensureOutDirExists = async (outdir) => {
	try {
		await fs.mkdir(outdir, { recursive: true });
		console.log(`Output directory created: ${outdir}`);
	} catch (err) {
		console.error(`Error creating output directory: ${err.message}`);
		process.exit(1);
	}
};

// Determine whether to build for production or development
const prod = (process.argv[2] === "production");

// Get the output directory
const outdir = getOutDir();

// Create the output directory if it doesn't exist
await ensureOutDirExists(outdir);

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir,
	plugins: [
		copy({
			assets: {
				from: ['./manifest.json'],
				to: ['./manifest.json']
			}
		}),
		copy({
			assets: {
				from: ['./styles/styles.css'],
				to: ['./styles.css']
			}
		})
	],
});

// Rebuild or watch based on the mode
if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
